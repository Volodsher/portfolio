{"version":3,"sources":["images sync /^/.//.*/.png$","images/art.png","images/dia.png","images/miami.png","images/todos.png","components/ProjectItem/ProjectItem.js","components/ProjectList/ProjectList.js","api/projects.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ProjectItem","name","url","imageUrl","technologies","urlCode","console","log","this","className","href","src","require","alt","length","ProjectList","listOfProjects","projects","project","numb","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qLAAA,IAAIA,EAAM,CACT,YAAa,GACb,YAAa,GACb,cAAe,GACf,cAAe,IAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBCzBpBU,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,0GCqB5BC,MAlBf,YAAsE,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,IAAKC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,QAExD,OADAC,QAAQC,IAAIC,MAEV,yBAAKC,UAAU,eACb,uBAAGC,KAAMR,GACP,yBAAKO,UAAU,eAAeE,IAAKC,MAAQ,YAAgBT,EAAjB,SAAkCU,IAAI,MAElF,yBAAKJ,UAAU,aACb,4BAAI,uBAAGA,UAAU,gBAAgBC,KAAMR,GAAK,8BAAOD,KACnD,4BAAI,uBAAGQ,UAAU,gBAAgBC,KAAML,GAAUA,EAAQS,OAAS,EAAI,cAAgB,KACtF,2BACGV,MCSIW,EAnBY,SAAC,GAAkB,IACxCC,EADuC,EAAfC,SACEhC,KAAI,SAACiC,EAASC,GAC1C,OAAO,kBAAC,EAAD,CACLC,IAAKF,EAAQ9B,GACba,KAAMiB,EAAQjB,KACdC,IAAKgB,EAAQhB,IACbG,QAASa,EAAQb,QACjBF,SAAUe,EAAQf,SAClBC,aAAcc,EAAQd,kBAI1B,OACE,yBAAKK,UAAU,eACZO,IClBMC,EAAW,CACtB,CACE7B,GAAI,EACJa,KAAM,cACNC,IAAK,2BACLC,SAAU,MACVC,aAAc,yBACdC,QAAS,IAEX,CACEjB,GAAI,EACJa,KAAM,WACNC,IAAK,8CACLC,SAAU,QACVC,aAAc,yBACdC,QAAS,kEAEX,CACEjB,GAAI,EACJa,KAAM,eACNC,IAAK,4CACLC,SAAU,QACVC,aAAc,yBACdC,QAAS,gEAEX,CACEjB,GAAI,EACJa,KAAM,aACNC,IAAK,0CACLC,SAAU,MACVC,aAAc,yBACdC,QAAS,2D,MCdEgB,MAXf,WACE,OACE,yBAAKZ,UAAU,OACb,wBAAIA,UAAU,UAAd,yBAGA,kBAAC,EAAD,CAAaQ,SAAUA,MCATK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.88ccfd33.chunk.js","sourcesContent":["var map = {\n\t\"./art.png\": 12,\n\t\"./dia.png\": 13,\n\t\"./miami.png\": 14,\n\t\"./todos.png\": 15\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11;","module.exports = __webpack_public_path__ + \"static/media/art.547af8d5.png\";","module.exports = __webpack_public_path__ + \"static/media/dia.32e265c4.png\";","module.exports = __webpack_public_path__ + \"static/media/miami.d7bfb372.png\";","module.exports = __webpack_public_path__ + \"static/media/todos.7a9c12aa.png\";","import React from 'react';\nimport './ProjectItem.css';\n\nfunction ProjectItem({ name, url, imageUrl, technologies, urlCode }) {\n  console.log(this);\n  return (\n    <div className=\"projectItem\">\n      <a href={url}>\n        <img className=\"projectImage\" src={require(`../../images/${imageUrl}.png`)} alt=\"\" />\n      </a>\n      <div className=\"container\">\n        <h3><a className=\"containerLink\" href={url}><span>{name}</span></a></h3>\n        <h4><a className=\"containerLink\" href={urlCode}>{urlCode.length > 0 ? 'Review code' : ''}</a></h4>\n        <p>\n          {technologies}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default ProjectItem;\n","import React from 'react';\nimport './ProjectList.css';\nimport ProjectItem from '../ProjectItem/ProjectItem';\n\nexport const ProjectList = ({ projects }) => {\n  let listOfProjects = projects.map((project, numb) => {\n    return <ProjectItem\n      key={project.id}\n      name={project.name}\n      url={project.url}\n      urlCode={project.urlCode}\n      imageUrl={project.imageUrl}\n      technologies={project.technologies}\n    />\n  });\n\n  return (\n    <div className=\"projectList\">\n      {listOfProjects}\n    </div>\n  )\n};\n\nexport default ProjectList;\n","export const projects = [\n  {\n    id: 0,\n    name: 'Art project',\n    url: 'http://chaykovska.com.ua',\n    imageUrl: 'art',\n    technologies: 'React.js, JS, CSS, JSX',\n    urlCode: '',\n  },\n  {\n    id: 1,\n    name: 'Todo app',\n    url: 'https://volodsher.github.io/react_todo-app/',\n    imageUrl: 'todos',\n    technologies: 'React.js, JS, CSS, JSX',\n    urlCode: 'https://github.com/Volodsher/react_todo-app/tree/dvlpr-todoApp',\n  },\n  {\n    id: 2,\n    name: 'Layout Miami',\n    url: 'https://volodsher.github.io/layout_miami/',\n    imageUrl: 'miami',\n    technologies: 'React.js, JS, CSS, JSX',\n    urlCode: 'https://github.com/Volodsher/layout_miami/tree/dvlpr-miami-v',\n  },\n  {\n    id: 3,\n    name: 'Layout Dia',\n    url: 'https://volodsher.github.io/layout_dia/',\n    imageUrl: 'dia',\n    technologies: 'React.js, JS, CSS, JSX',\n    urlCode: 'https://github.com/Volodsher/layout_dia/tree/dvlpr-dia',\n  },\n]\n\nexport default projects;\n","import React from 'react';\n// import logo from './logo.svg';\nimport ProjectList from './components/ProjectList/ProjectList';\nimport { projects } from './api/projects';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 className=\"header\">\n        Volodsher's Portfolio\n      </h1>\n      <ProjectList projects={projects} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}